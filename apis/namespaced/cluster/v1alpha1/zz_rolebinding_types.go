// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type RoleBindingInitParameters struct {

	// (String) The id of the cluster resource belongs to
	// The id of the cluster resource belongs to
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (String) The name of the cluster role to bind to
	// The name of the cluster role to bind to
	ClusterRoleName *string `json:"clusterRoleName,omitempty" tf:"cluster_role_name,omitempty"`

	// (String) The id of the project resource belongs to
	// The id of the project resource belongs to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Users and groups to bind for
	Subject []SubjectInitParameters `json:"subject,omitempty" tf:"subject,omitempty"`
}

type RoleBindingObservation struct {

	// (String) The id of the cluster resource belongs to
	// The id of the cluster resource belongs to
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (String) The name of the cluster role to bind to
	// The name of the cluster role to bind to
	ClusterRoleName *string `json:"clusterRoleName,omitempty" tf:"cluster_role_name,omitempty"`

	// (String)
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The id of the project resource belongs to
	// The id of the project resource belongs to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Users and groups to bind for
	Subject []SubjectObservation `json:"subject,omitempty" tf:"subject,omitempty"`
}

type RoleBindingParameters struct {

	// (String) The id of the cluster resource belongs to
	// The id of the cluster resource belongs to
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (String) The name of the cluster role to bind to
	// The name of the cluster role to bind to
	// +kubebuilder:validation:Optional
	ClusterRoleName *string `json:"clusterRoleName,omitempty" tf:"cluster_role_name,omitempty"`

	// (String) The id of the project resource belongs to
	// The id of the project resource belongs to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Users and groups to bind for
	// +kubebuilder:validation:Optional
	Subject []SubjectParameters `json:"subject,omitempty" tf:"subject,omitempty"`
}

type SubjectInitParameters struct {

	// (String) Can be either 'user' or 'group'
	// Can be either 'user' or 'group'
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) Subject name
	// Subject name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SubjectObservation struct {

	// (String) Can be either 'user' or 'group'
	// Can be either 'user' or 'group'
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) Subject name
	// Subject name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SubjectParameters struct {

	// (String) Can be either 'user' or 'group'
	// Can be either 'user' or 'group'
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// (String) Subject name
	// Subject name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// RoleBindingSpec defines the desired state of RoleBinding
type RoleBindingSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            RoleBindingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoleBindingInitParameters `json:"initProvider,omitempty"`
}

// RoleBindingStatus defines the observed state of RoleBinding.
type RoleBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RoleBinding is the Schema for the RoleBindings API. Cluster role binding allows binding cluster roles to users and groups
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,syseleven-metakube}
type RoleBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterRoleName) || (has(self.initProvider) && has(self.initProvider.clusterRoleName))",message="spec.forProvider.clusterRoleName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subject) || (has(self.initProvider) && has(self.initProvider.subject))",message="spec.forProvider.subject is a required parameter"
	Spec   RoleBindingSpec   `json:"spec"`
	Status RoleBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleBindingList contains a list of RoleBindings
type RoleBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleBinding `json:"items"`
}

// Repository type metadata.
var (
	RoleBinding_Kind             = "RoleBinding"
	RoleBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoleBinding_Kind}.String()
	RoleBinding_KindAPIVersion   = RoleBinding_Kind + "." + CRDGroupVersion.String()
	RoleBinding_GroupVersionKind = CRDGroupVersion.WithKind(RoleBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&RoleBinding{}, &RoleBindingList{})
}
