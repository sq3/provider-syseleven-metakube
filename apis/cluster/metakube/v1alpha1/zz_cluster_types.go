// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ApplicationCredentialsInitParameters struct {

	// (String) Cluster identifier
	// Openstack application credentials ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Openstack application credentials secret
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`
}

type ApplicationCredentialsObservation struct {

	// (String) Cluster identifier
	// Openstack application credentials ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApplicationCredentialsParameters struct {

	// (String) Cluster identifier
	// Openstack application credentials ID
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Openstack application credentials secret
	// +kubebuilder:validation:Optional
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`
}

type AwsInitParameters struct {

	// (String) Cluster identifier
	// Access key identifier
	AccessKeyIDSecretRef v1.SecretKeySelector `json:"accessKeyIdSecretRef" tf:"-"`

	// (String) Cluster name
	// Instance profile name
	InstanceProfileName *string `json:"instanceProfileName,omitempty" tf:"instance_profile_name,omitempty"`

	// Openstack tenant/project name for the account
	OpenstackBillingTenant *string `json:"openstackBillingTenant,omitempty" tf:"openstack_billing_tenant,omitempty"`

	// The IAM role the control plane will use over assume-role
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// (String) Cluster identifier
	// Route table identifier
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// Secret access key
	SecretAccessKeySecretRef v1.SecretKeySelector `json:"secretAccessKeySecretRef" tf:"-"`

	// (String) Cluster identifier
	// Security group identifier
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// (String) Cluster identifier
	// Virtual private cloud identifier
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type AwsObservation struct {

	// (String) Cluster name
	// Instance profile name
	InstanceProfileName *string `json:"instanceProfileName,omitempty" tf:"instance_profile_name,omitempty"`

	// Openstack tenant/project name for the account
	OpenstackBillingTenant *string `json:"openstackBillingTenant,omitempty" tf:"openstack_billing_tenant,omitempty"`

	// The IAM role the control plane will use over assume-role
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// (String) Cluster identifier
	// Route table identifier
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// (String) Cluster identifier
	// Security group identifier
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// (String) Cluster identifier
	// Virtual private cloud identifier
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type AwsParameters struct {

	// (String) Cluster identifier
	// Access key identifier
	// +kubebuilder:validation:Optional
	AccessKeyIDSecretRef v1.SecretKeySelector `json:"accessKeyIdSecretRef" tf:"-"`

	// (String) Cluster name
	// Instance profile name
	// +kubebuilder:validation:Optional
	InstanceProfileName *string `json:"instanceProfileName,omitempty" tf:"instance_profile_name,omitempty"`

	// Openstack tenant/project name for the account
	// +kubebuilder:validation:Optional
	OpenstackBillingTenant *string `json:"openstackBillingTenant" tf:"openstack_billing_tenant,omitempty"`

	// The IAM role the control plane will use over assume-role
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// (String) Cluster identifier
	// Route table identifier
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// Secret access key
	// +kubebuilder:validation:Optional
	SecretAccessKeySecretRef v1.SecretKeySelector `json:"secretAccessKeySecretRef" tf:"-"`

	// (String) Cluster identifier
	// Security group identifier
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// (String) Cluster identifier
	// Virtual private cloud identifier
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

type AzureInitParameters struct {
	AvailabilitySet *string `json:"availabilitySet,omitempty" tf:"availability_set,omitempty"`

	// (String) Cluster identifier
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// Openstack tenant/project name for the account
	OpenstackBillingTenant *string `json:"openstackBillingTenant,omitempty" tf:"openstack_billing_tenant,omitempty"`

	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	RouteTable *string `json:"routeTable,omitempty" tf:"route_table,omitempty"`

	SecurityGroup *string `json:"securityGroup,omitempty" tf:"security_group,omitempty"`

	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// (String) Cluster identifier
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// (String) Cluster identifier
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	Vnet *string `json:"vnet,omitempty" tf:"vnet,omitempty"`
}

type AzureObservation struct {
	AvailabilitySet *string `json:"availabilitySet,omitempty" tf:"availability_set,omitempty"`

	// (String) Cluster identifier
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Openstack tenant/project name for the account
	OpenstackBillingTenant *string `json:"openstackBillingTenant,omitempty" tf:"openstack_billing_tenant,omitempty"`

	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	RouteTable *string `json:"routeTable,omitempty" tf:"route_table,omitempty"`

	SecurityGroup *string `json:"securityGroup,omitempty" tf:"security_group,omitempty"`

	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// (String) Cluster identifier
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// (String) Cluster identifier
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	Vnet *string `json:"vnet,omitempty" tf:"vnet,omitempty"`
}

type AzureParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilitySet *string `json:"availabilitySet,omitempty" tf:"availability_set,omitempty"`

	// (String) Cluster identifier
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// Openstack tenant/project name for the account
	// +kubebuilder:validation:Optional
	OpenstackBillingTenant *string `json:"openstackBillingTenant" tf:"openstack_billing_tenant,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	// +kubebuilder:validation:Optional
	RouteTable *string `json:"routeTable,omitempty" tf:"route_table,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroup *string `json:"securityGroup,omitempty" tf:"security_group,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// (String) Cluster identifier
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId" tf:"subscription_id,omitempty"`

	// (String) Cluster identifier
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`

	// +kubebuilder:validation:Optional
	Vnet *string `json:"vnet,omitempty" tf:"vnet,omitempty"`
}

type CloudInitParameters struct {

	// AWS cluster specification
	Aws []AwsInitParameters `json:"aws,omitempty" tf:"aws,omitempty"`

	// Azire cluster specification
	Azure []AzureInitParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// OpenStack cluster specification
	Openstack []OpenstackInitParameters `json:"openstack,omitempty" tf:"openstack,omitempty"`
}

type CloudObservation struct {

	// AWS cluster specification
	Aws []AwsObservation `json:"aws,omitempty" tf:"aws,omitempty"`

	// Azire cluster specification
	Azure []AzureObservation `json:"azure,omitempty" tf:"azure,omitempty"`

	// OpenStack cluster specification
	Openstack []OpenstackObservation `json:"openstack,omitempty" tf:"openstack,omitempty"`
}

type CloudParameters struct {

	// AWS cluster specification
	// +kubebuilder:validation:Optional
	Aws []AwsParameters `json:"aws,omitempty" tf:"aws,omitempty"`

	// Azire cluster specification
	// +kubebuilder:validation:Optional
	Azure []AzureParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// OpenStack cluster specification
	// +kubebuilder:validation:Optional
	Openstack []OpenstackParameters `json:"openstack,omitempty" tf:"openstack,omitempty"`
}

type ClusterInitParameters struct {

	// (String) Data center name
	// Data center name
	DcName *string `json:"dcName,omitempty" tf:"dc_name,omitempty"`

	// (Map of String) Labels added to cluster
	// Labels added to cluster
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Cluster specification
	Spec []SpecInitParameters `json:"spec,omitempty" tf:"spec,omitempty"`

	// (Set of String) SSH keys attached to nodes
	// SSH keys attached to nodes
	// +listType=set
	Sshkeys []*string `json:"sshkeys,omitempty" tf:"sshkeys,omitempty"`
}

type ClusterObservation struct {

	// (String) Creation timestamp
	// Creation timestamp
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	// (String) Data center name
	// Data center name
	DcName *string `json:"dcName,omitempty" tf:"dc_name,omitempty"`

	// (String) Deletion timestamp
	// Deletion timestamp
	DeletionTimestamp *string `json:"deletionTimestamp,omitempty" tf:"deletion_timestamp,omitempty"`

	// (String) Cluster identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The kubelogin config content
	KubeLoginKubeConfig *string `json:"kubeLoginKubeConfig,omitempty" tf:"kube_login_kube_config,omitempty"`

	// (Map of String) Labels added to cluster
	// Labels added to cluster
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Reference project identifier
	// Reference project identifier
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cluster specification
	Spec []SpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`

	// (Set of String) SSH keys attached to nodes
	// SSH keys attached to nodes
	// +listType=set
	Sshkeys []*string `json:"sshkeys,omitempty" tf:"sshkeys,omitempty"`
}

type ClusterParameters struct {

	// (String) Data center name
	// Data center name
	// +kubebuilder:validation:Optional
	DcName *string `json:"dcName,omitempty" tf:"dc_name,omitempty"`

	// (Map of String) Labels added to cluster
	// Labels added to cluster
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Reference project identifier
	// Reference project identifier
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// Cluster specification
	// +kubebuilder:validation:Optional
	Spec []SpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`

	// (Set of String) SSH keys attached to nodes
	// SSH keys attached to nodes
	// +kubebuilder:validation:Optional
	// +listType=set
	Sshkeys []*string `json:"sshkeys,omitempty" tf:"sshkeys,omitempty"`
}

type CniPluginInitParameters struct {

	// Define the type of CNI plugin
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CniPluginObservation struct {

	// Define the type of CNI plugin
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CniPluginParameters struct {

	// Define the type of CNI plugin
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type OpenstackInitParameters struct {
	ApplicationCredentials []ApplicationCredentialsInitParameters `json:"applicationCredentials,omitempty" tf:"application_credentials,omitempty"`

	// The floating ip pool used by all worker nodes to receive a public ip
	FloatingIPPool *string `json:"floatingIpPool,omitempty" tf:"floating_ip_pool,omitempty"`

	// When specified, all worker nodes will be attached to this network. If not specified, a network, subnet & router will be created.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// When specified, all worker nodes will be attached to this security group. If not specified, a security group will be created
	SecurityGroup *string `json:"securityGroup,omitempty" tf:"security_group,omitempty"`

	// (String) Cluster identifier
	// Server group to use for all machines within a cluster
	ServerGroupID *string `json:"serverGroupId,omitempty" tf:"server_group_id,omitempty"`

	// Change this to configure a different internal IP range for Nodes. Default: 192.168.1.0/24
	SubnetCidr *string `json:"subnetCidr,omitempty" tf:"subnet_cidr,omitempty"`

	// (String) Cluster identifier
	// When specified, all worker nodes will be attached to this subnet of specified network. If not specified, a network, subnet & router will be created.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	UserCredentials []UserCredentialsInitParameters `json:"userCredentials,omitempty" tf:"user_credentials,omitempty"`
}

type OpenstackObservation struct {
	ApplicationCredentials []ApplicationCredentialsObservation `json:"applicationCredentials,omitempty" tf:"application_credentials,omitempty"`

	// The floating ip pool used by all worker nodes to receive a public ip
	FloatingIPPool *string `json:"floatingIpPool,omitempty" tf:"floating_ip_pool,omitempty"`

	// When specified, all worker nodes will be attached to this network. If not specified, a network, subnet & router will be created.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// When specified, all worker nodes will be attached to this security group. If not specified, a security group will be created
	SecurityGroup *string `json:"securityGroup,omitempty" tf:"security_group,omitempty"`

	// (String) Cluster identifier
	// Server group to use for all machines within a cluster
	ServerGroupID *string `json:"serverGroupId,omitempty" tf:"server_group_id,omitempty"`

	// Change this to configure a different internal IP range for Nodes. Default: 192.168.1.0/24
	SubnetCidr *string `json:"subnetCidr,omitempty" tf:"subnet_cidr,omitempty"`

	// (String) Cluster identifier
	// When specified, all worker nodes will be attached to this subnet of specified network. If not specified, a network, subnet & router will be created.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	UserCredentials []UserCredentialsObservation `json:"userCredentials,omitempty" tf:"user_credentials,omitempty"`
}

type OpenstackParameters struct {

	// +kubebuilder:validation:Optional
	ApplicationCredentials []ApplicationCredentialsParameters `json:"applicationCredentials,omitempty" tf:"application_credentials,omitempty"`

	// The floating ip pool used by all worker nodes to receive a public ip
	// +kubebuilder:validation:Optional
	FloatingIPPool *string `json:"floatingIpPool,omitempty" tf:"floating_ip_pool,omitempty"`

	// When specified, all worker nodes will be attached to this network. If not specified, a network, subnet & router will be created.
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// When specified, all worker nodes will be attached to this security group. If not specified, a security group will be created
	// +kubebuilder:validation:Optional
	SecurityGroup *string `json:"securityGroup,omitempty" tf:"security_group,omitempty"`

	// (String) Cluster identifier
	// Server group to use for all machines within a cluster
	// +kubebuilder:validation:Optional
	ServerGroupID *string `json:"serverGroupId,omitempty" tf:"server_group_id,omitempty"`

	// Change this to configure a different internal IP range for Nodes. Default: 192.168.1.0/24
	// +kubebuilder:validation:Optional
	SubnetCidr *string `json:"subnetCidr,omitempty" tf:"subnet_cidr,omitempty"`

	// (String) Cluster identifier
	// When specified, all worker nodes will be attached to this subnet of specified network. If not specified, a network, subnet & router will be created.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	UserCredentials []UserCredentialsParameters `json:"userCredentials,omitempty" tf:"user_credentials,omitempty"`
}

type SpecInitParameters struct {

	// (Boolean) Whether to enable audit logging or not
	// Whether to enable audit logging or not
	AuditLogging *bool `json:"auditLogging,omitempty" tf:"audit_logging,omitempty"`

	// Cloud provider specification
	Cloud []CloudInitParameters `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// Contains the spec of the CNI plugin used by the Cluster
	CniPlugin []CniPluginInitParameters `json:"cniPlugin,omitempty" tf:"cni_plugin,omitempty"`

	// (Boolean) SSH Agent as a daemon running on each node that can manage ssh keys. Disable it if you want to manage keys manually
	// SSH Agent as a daemon running on each node that can manage ssh keys. Disable it if you want to manage keys manually
	EnableSSHAgent *bool `json:"enableSshAgent,omitempty" tf:"enable_ssh_agent,omitempty"`

	// (String) Represents IP address family to use for the Cluster
	// Represents IP address family to use for the Cluster
	IPFamily *string `json:"ipFamily,omitempty" tf:"ip_family,omitempty"`

	// (Boolean) Configure PodNodeSelector admission plugin at the apiserver
	// Configure PodNodeSelector admission plugin at the apiserver
	PodNodeSelector *bool `json:"podNodeSelector,omitempty" tf:"pod_node_selector,omitempty"`

	// (Boolean) Pod security policies allow detailed authorization of pod creation and updates
	// Pod security policies allow detailed authorization of pod creation and updates
	PodSecurityPolicy *bool `json:"podSecurityPolicy,omitempty" tf:"pod_security_policy,omitempty"`

	// (String) Internal IP range for Pods
	// Internal IP range for Pods
	PodsCidr *string `json:"podsCidr,omitempty" tf:"pods_cidr,omitempty"`

	// (String) Internal IP range for ClusterIP Services
	// Internal IP range for ClusterIP Services
	ServicesCidr *string `json:"servicesCidr,omitempty" tf:"services_cidr,omitempty"`

	// Configuration of SysEleven Login over OpenID Connect to authenticate against this cluster
	SyselevenAuth []SyselevenAuthInitParameters `json:"syselevenAuth,omitempty" tf:"syseleven_auth,omitempty"`

	// Flatcar nodes reboot window
	UpdateWindow []UpdateWindowInitParameters `json:"updateWindow,omitempty" tf:"update_window,omitempty"`

	// (String) Cloud orchestrator version, either Kubernetes or OpenShift
	// Cloud orchestrator version, either Kubernetes or OpenShift
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SpecObservation struct {

	// (Boolean) Whether to enable audit logging or not
	// Whether to enable audit logging or not
	AuditLogging *bool `json:"auditLogging,omitempty" tf:"audit_logging,omitempty"`

	// Cloud provider specification
	Cloud []CloudObservation `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// Contains the spec of the CNI plugin used by the Cluster
	CniPlugin []CniPluginObservation `json:"cniPlugin,omitempty" tf:"cni_plugin,omitempty"`

	// (Boolean) SSH Agent as a daemon running on each node that can manage ssh keys. Disable it if you want to manage keys manually
	// SSH Agent as a daemon running on each node that can manage ssh keys. Disable it if you want to manage keys manually
	EnableSSHAgent *bool `json:"enableSshAgent,omitempty" tf:"enable_ssh_agent,omitempty"`

	// (String) Represents IP address family to use for the Cluster
	// Represents IP address family to use for the Cluster
	IPFamily *string `json:"ipFamily,omitempty" tf:"ip_family,omitempty"`

	// (Boolean) Configure PodNodeSelector admission plugin at the apiserver
	// Configure PodNodeSelector admission plugin at the apiserver
	PodNodeSelector *bool `json:"podNodeSelector,omitempty" tf:"pod_node_selector,omitempty"`

	// (Boolean) Pod security policies allow detailed authorization of pod creation and updates
	// Pod security policies allow detailed authorization of pod creation and updates
	PodSecurityPolicy *bool `json:"podSecurityPolicy,omitempty" tf:"pod_security_policy,omitempty"`

	// (String) Internal IP range for Pods
	// Internal IP range for Pods
	PodsCidr *string `json:"podsCidr,omitempty" tf:"pods_cidr,omitempty"`

	// (String) Internal IP range for ClusterIP Services
	// Internal IP range for ClusterIP Services
	ServicesCidr *string `json:"servicesCidr,omitempty" tf:"services_cidr,omitempty"`

	// Configuration of SysEleven Login over OpenID Connect to authenticate against this cluster
	SyselevenAuth []SyselevenAuthObservation `json:"syselevenAuth,omitempty" tf:"syseleven_auth,omitempty"`

	// Flatcar nodes reboot window
	UpdateWindow []UpdateWindowObservation `json:"updateWindow,omitempty" tf:"update_window,omitempty"`

	// (String) Cloud orchestrator version, either Kubernetes or OpenShift
	// Cloud orchestrator version, either Kubernetes or OpenShift
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SpecParameters struct {

	// (Boolean) Whether to enable audit logging or not
	// Whether to enable audit logging or not
	// +kubebuilder:validation:Optional
	AuditLogging *bool `json:"auditLogging,omitempty" tf:"audit_logging,omitempty"`

	// Cloud provider specification
	// +kubebuilder:validation:Optional
	Cloud []CloudParameters `json:"cloud" tf:"cloud,omitempty"`

	// Contains the spec of the CNI plugin used by the Cluster
	// +kubebuilder:validation:Optional
	CniPlugin []CniPluginParameters `json:"cniPlugin,omitempty" tf:"cni_plugin,omitempty"`

	// (Boolean) SSH Agent as a daemon running on each node that can manage ssh keys. Disable it if you want to manage keys manually
	// SSH Agent as a daemon running on each node that can manage ssh keys. Disable it if you want to manage keys manually
	// +kubebuilder:validation:Optional
	EnableSSHAgent *bool `json:"enableSshAgent,omitempty" tf:"enable_ssh_agent,omitempty"`

	// (String) Represents IP address family to use for the Cluster
	// Represents IP address family to use for the Cluster
	// +kubebuilder:validation:Optional
	IPFamily *string `json:"ipFamily,omitempty" tf:"ip_family,omitempty"`

	// (Boolean) Configure PodNodeSelector admission plugin at the apiserver
	// Configure PodNodeSelector admission plugin at the apiserver
	// +kubebuilder:validation:Optional
	PodNodeSelector *bool `json:"podNodeSelector,omitempty" tf:"pod_node_selector,omitempty"`

	// (Boolean) Pod security policies allow detailed authorization of pod creation and updates
	// Pod security policies allow detailed authorization of pod creation and updates
	// +kubebuilder:validation:Optional
	PodSecurityPolicy *bool `json:"podSecurityPolicy,omitempty" tf:"pod_security_policy,omitempty"`

	// (String) Internal IP range for Pods
	// Internal IP range for Pods
	// +kubebuilder:validation:Optional
	PodsCidr *string `json:"podsCidr,omitempty" tf:"pods_cidr,omitempty"`

	// (String) Internal IP range for ClusterIP Services
	// Internal IP range for ClusterIP Services
	// +kubebuilder:validation:Optional
	ServicesCidr *string `json:"servicesCidr,omitempty" tf:"services_cidr,omitempty"`

	// Configuration of SysEleven Login over OpenID Connect to authenticate against this cluster
	// +kubebuilder:validation:Optional
	SyselevenAuth []SyselevenAuthParameters `json:"syselevenAuth,omitempty" tf:"syseleven_auth,omitempty"`

	// Flatcar nodes reboot window
	// +kubebuilder:validation:Optional
	UpdateWindow []UpdateWindowParameters `json:"updateWindow,omitempty" tf:"update_window,omitempty"`

	// (String) Cloud orchestrator version, either Kubernetes or OpenShift
	// Cloud orchestrator version, either Kubernetes or OpenShift
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type SyselevenAuthInitParameters struct {

	// Realm name
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`
}

type SyselevenAuthObservation struct {

	// Realm name
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`
}

type SyselevenAuthParameters struct {

	// Realm name
	// +kubebuilder:validation:Optional
	Realm *string `json:"realm" tf:"realm,omitempty"`
}

type UpdateWindowInitParameters struct {

	// Node reboot window duration
	Length *string `json:"length,omitempty" tf:"length,omitempty"`

	// Node reboot window start time
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type UpdateWindowObservation struct {

	// Node reboot window duration
	Length *string `json:"length,omitempty" tf:"length,omitempty"`

	// Node reboot window start time
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type UpdateWindowParameters struct {

	// Node reboot window duration
	// +kubebuilder:validation:Optional
	Length *string `json:"length" tf:"length,omitempty"`

	// Node reboot window start time
	// +kubebuilder:validation:Optional
	Start *string `json:"start" tf:"start,omitempty"`
}

type UserCredentialsInitParameters struct {

	// The openstack account's password
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Cluster name
	// The name of openstack project
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// (String) Cluster name
	// The openstack account's username
	UsernameSecretRef *v1.SecretKeySelector `json:"usernameSecretRef,omitempty" tf:"-"`
}

type UserCredentialsObservation struct {

	// (String) Reference project identifier
	// The id of openstack project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) Cluster name
	// The name of openstack project
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`
}

type UserCredentialsParameters struct {

	// The openstack account's password
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Reference project identifier
	// The id of openstack project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) Cluster name
	// The name of openstack project
	// +kubebuilder:validation:Optional
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// (String) Cluster name
	// The openstack account's username
	// +kubebuilder:validation:Optional
	UsernameSecretRef *v1.SecretKeySelector `json:"usernameSecretRef,omitempty" tf:"-"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cluster is the Schema for the Clusters API. Cluster resource in the provider defines the corresponding cluster in MetaKube
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,syseleven-metakube}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dcName) || (has(self.initProvider) && has(self.initProvider.dcName))",message="spec.forProvider.dcName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
