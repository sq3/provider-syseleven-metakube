// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type CronJobInitParameters struct {

	// Maintenance cron job specification
	Spec []SpecInitParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type CronJobObservation struct {

	// (String) Cluster that maintenance cron job belongs to
	// Cluster that maintenance cron job belongs to
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (String) Creation timestamp
	// Creation timestamp
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	// (String) Deletion timestamp
	// Deletion timestamp
	DeletionTimestamp *string `json:"deletionTimestamp,omitempty" tf:"deletion_timestamp,omitempty"`

	// (String)
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Reference project identifier
	// Reference project identifier
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Maintenance cron job specification
	Spec []SpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`
}

type CronJobParameters struct {

	// (String) Cluster that maintenance cron job belongs to
	// Cluster that maintenance cron job belongs to
	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// Maintenance cron job specification
	// +kubebuilder:validation:Optional
	Spec []SpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type MaintenanceJobTemplateInitParameters struct {

	// (Map of String) Map of string keys and values that can be used to set certain options for the given maintenance type
	// Ubuntu operating system
	Options []OptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`

	// (Boolean) Indicates whether the maintenance done should be rolled back
	// Indicates whether the maintenance done should be rolled back
	Rollback *bool `json:"rollback,omitempty" tf:"rollback,omitempty"`

	// (String) Defines the type of maintenance that should be run
	// Defines the type of maintenance that should be run
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MaintenanceJobTemplateObservation struct {

	// (Map of String) Map of string keys and values that can be used to set certain options for the given maintenance type
	// Ubuntu operating system
	Options []OptionsObservation `json:"options,omitempty" tf:"options,omitempty"`

	// (Boolean) Indicates whether the maintenance done should be rolled back
	// Indicates whether the maintenance done should be rolled back
	Rollback *bool `json:"rollback,omitempty" tf:"rollback,omitempty"`

	// (String) Defines the type of maintenance that should be run
	// Defines the type of maintenance that should be run
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MaintenanceJobTemplateParameters struct {

	// (Map of String) Map of string keys and values that can be used to set certain options for the given maintenance type
	// Ubuntu operating system
	// +kubebuilder:validation:Optional
	Options []OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`

	// (Boolean) Indicates whether the maintenance done should be rolled back
	// Indicates whether the maintenance done should be rolled back
	// +kubebuilder:validation:Optional
	Rollback *bool `json:"rollback,omitempty" tf:"rollback,omitempty"`

	// (String) Defines the type of maintenance that should be run
	// Defines the type of maintenance that should be run
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type OptionsInitParameters struct {

	// (Map of String) Map of string keys and values that can be used to set certain options for the given maintenance type
	// Map of string keys and values that can be used to set certain options for the given maintenance type.
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`
}

type OptionsObservation struct {

	// (Map of String) Map of string keys and values that can be used to set certain options for the given maintenance type
	// Map of string keys and values that can be used to set certain options for the given maintenance type.
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`
}

type OptionsParameters struct {

	// (Map of String) Map of string keys and values that can be used to set certain options for the given maintenance type
	// Map of string keys and values that can be used to set certain options for the given maintenance type.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`
}

type SpecInitParameters struct {

	// MaintenanceJob template specification
	MaintenanceJobTemplate []MaintenanceJobTemplateInitParameters `json:"maintenanceJobTemplate,omitempty" tf:"maintenance_job_template,omitempty"`

	// (String) A schedule in cron format
	// A schedule in cron format
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type SpecObservation struct {

	// MaintenanceJob template specification
	MaintenanceJobTemplate []MaintenanceJobTemplateObservation `json:"maintenanceJobTemplate,omitempty" tf:"maintenance_job_template,omitempty"`

	// (String) A schedule in cron format
	// A schedule in cron format
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type SpecParameters struct {

	// MaintenanceJob template specification
	// +kubebuilder:validation:Optional
	MaintenanceJobTemplate []MaintenanceJobTemplateParameters `json:"maintenanceJobTemplate" tf:"maintenance_job_template,omitempty"`

	// (String) A schedule in cron format
	// A schedule in cron format
	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`
}

// CronJobSpec defines the desired state of CronJob
type CronJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CronJobParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CronJobInitParameters `json:"initProvider,omitempty"`
}

// CronJobStatus defines the observed state of CronJob.
type CronJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CronJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CronJob is the Schema for the CronJobs API. Maintenance cron job resource manages scheduled maintenance tasks for clusters
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,syseleven-metakube}
type CronJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	Spec   CronJobSpec   `json:"spec"`
	Status CronJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CronJobList contains a list of CronJobs
type CronJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CronJob `json:"items"`
}

// Repository type metadata.
var (
	CronJob_Kind             = "CronJob"
	CronJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CronJob_Kind}.String()
	CronJob_KindAPIVersion   = CronJob_Kind + "." + CRDGroupVersion.String()
	CronJob_GroupVersionKind = CRDGroupVersion.WithKind(CronJob_Kind)
)

func init() {
	SchemeBuilder.Register(&CronJob{}, &CronJobList{})
}
