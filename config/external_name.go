package config

import (
	"github.com/crossplane/upjet/v2/pkg/config"
)

// ExternalNameConfigs contains all external name configurations for this
// provider.
var ExternalNameConfigs = map[string]config.ExternalName{
	// metakube_cluster is imported via project-id:cluster-id
	// The ID is auto-generated by the provider
	"metakube_cluster": config.TemplatedStringAsIdentifier("name", "{{ .parameters.project_id }}:{{ .external_name }}"),

	// metakube_node_deployment is imported via project-id:cluster-id:node-deployment-id
	// The ID is auto-generated by the provider
	"metakube_node_deployment": config.TemplatedStringAsIdentifier("name", "{{ .parameters.project_id }}:{{ .parameters.cluster_id }}:{{ .external_name }}"),

	// metakube_sshkey is imported via project-id:sshkey-id
	// The ID is auto-generated by the provider
	"metakube_sshkey": config.TemplatedStringAsIdentifier("name", "{{ .parameters.project_id }}:{{ .external_name }}"),

	// metakube_cluster_role_binding uses a generated ID
	"metakube_cluster_role_binding": config.IdentifierFromProvider,

	// metakube_role_binding uses a generated ID
	"metakube_role_binding": config.IdentifierFromProvider,

	// metakube_maintenance_cron_job is imported via cluster-id
	"metakube_maintenance_cron_job": config.TemplatedStringAsIdentifier("name", "{{ .parameters.cluster_id }}:{{ .external_name }}"),
}

// ExternalNameConfigurations applies all external name configs listed in the
// table ExternalNameConfigs and sets the version of those resources to v1beta1
// assuming they will be tested.
func ExternalNameConfigurations() config.ResourceOption {
	return func(r *config.Resource) {
		if e, ok := ExternalNameConfigs[r.Name]; ok {
			r.ExternalName = e
		}
	}
}

// ExternalNameConfigured returns the list of all resources whose external name
// is configured manually.
func ExternalNameConfigured() []string {
	l := make([]string, len(ExternalNameConfigs))
	i := 0
	for name := range ExternalNameConfigs {
		// $ is added to match the exact string since the format is regex.
		l[i] = name + "$"
		i++
	}
	return l
}
